<?xml version="1.0" encoding="UTF-8"?>
<ViewConfig>
  <Arguments/>
  <Context/>
  <Model/>
  <View>
    <ClientEvent name="onReady" signature="self,arg,Chat,exitBtn">Chat.addChatCloseListener(function() {
	dorado.MessageBox.confirm(&quot;确定要退出系统吗？&quot;, function() {
		window.location.href = &quot;${configure['panda.logoutPath']}&quot;;
	})
});

exitBtn.set(&quot;tip&quot;, &quot;退出系统&quot;);
</ClientEvent>
    <ClientEvent name="onCreate">self.chatFloating = false;
self.chatWidth = &quot;100%&quot;;
self.chatHeight = &quot;100%&quot;;
</ClientEvent>
    <Property name="packages">font-awesome-info,entypo-info,colors,quill</Property>
    <Dialog id="Chat">
      <ClientEvent name="onCreate" signature="self,arg,chatarea,workarea,linkIFrame,dsActiveGroup,links,dsAG,chatTextArea,dsGlobalTemplate">self.noticeCount = 0;
self.onReceiveListeners = [];
self.onChatCloseListeners = [];
self.addReceiveListener = function(l) {
	self.onReceiveListeners.push(l);
};
self.addChatCloseListener = function(l) {
	self.onChatCloseListeners.push(l);
};
self.onReceive = function(socket, arg) {
	self.doReceiveNotice(socket, arg);
	self.onReceiveListeners.each(function(l) {
		l(self, {socket: socket, param: arg});
	});
};

self.receiveable = true;

self.connectNotifyServer = function() {
	self._noticeSocket = dorado.Socket.connect({
		service: &quot;noticeController#connectServer&quot;,
		parameter: &quot;${loginUsername}&quot;,
		onReceive: function(arg) {
			self.onReceive(view._notifySocket, arg);
		},
		onDisconnect: function() {

		}
	});
	self._noticeSocket._protocol._pollingAjaxEngine.addListener(&quot;onDisconnect&quot;, function(self, arg) {
		if (arg.result._connObj.conn.responseURL.indexOf(arg.result.url) === -1) {
			window.location.href = &quot;${configure['panda.loginSuccessPage']}&quot;;
		}
	});
};

self.send = function(notice) {
	self._noticeSocket.send(notice.type, notice);
}

self.connectNotifyServer();

self.doReceiveNotice = function(s, arg) {
	if(arg.type === &quot;message&quot;) {
		var groups = dsActiveGroup.getData();
		var group = null;
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				group = g;
				return false;
			}
		});
		
		var callback = function() {
			if (!group.noticeCount) {
				group.noticeCount = 0;
			}
			
			if (groups.getFirst() !== group) {
				groups.insert(group, &quot;begin&quot;);
				group.setState(dorado.Entity.STATE_NONE);
				group.get(&quot;functions&quot;).insert({});
			}
			arg.data.$dataType = &quot;Notice&quot;;
			var template = self.getTemplate(arg.data, group);
			group._template = template;
			group.set(&quot;lastNotice&quot;, arg.data);
			var entity = group.createChild(&quot;notices&quot;, group.get(&quot;lastNotice&quot;).toJSON());
			
			
			if (arg.data.sender === &quot;${loginUsername}&quot;) {
				return;
			} else {
				self.noticeCount++;
				group.noticeCount++;
			}
			if (groups.refreshCountTask) {
				clearTimeout(group.refreshCountTask);
			}

			group.refreshCountTask = setTimeout(function() {
				var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
				$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
				if (group.noticeCount) {
					var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
					$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
					if (group.noticeCount > 9) {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px 4px&quot;);
					} else {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px&quot;);
					}
					
				}
			}, 80);
		};
		if (group) {
			callback();
		} else {
			dsAG.set(&quot;parameter&quot;, {
				groupId: arg.data.groupId,
				memberId: &quot;${loginUsername}&quot;
			}).flush();
			group = groups.insert(dsAG.getData(), &quot;begin&quot;);
			callback();
		}
		
	} else if (arg.type === &quot;mark-read&quot;) {
		var groups = dsActiveGroup.getData();
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				self.noticeCount -= g.noticeCount;
				g.noticeCount = 0;
				$(&quot;#group-count-&quot; + g.entityId).css(&quot;display&quot;, &quot;none&quot;);
				return false;
			}
		});
	}
};


self.getTemplate = function(notice, group) {
	if (!notice.templateId) {
		return null;
	}
	var result;
	var ts = dsGlobalTemplate.getData();
	ts.each(function(t) {
		if (notice.templateId === t.get(&quot;id&quot;)) {
			result = t;
			return false;
		}
	});
	if (!result) {
		group.get(&quot;functions&quot;).each(function(t) {
			if (notice.templateId === t.get(&quot;id&quot;) &amp;&amp; !t.get(&quot;offline&quot;)) {
				result = t;
				return false;
			}
		});
	}
	return result;
}

if (view.chatFloating === false) {
	self.set(&quot;floating&quot;, false);
} else {
	self.set(&quot;floating&quot;, true);
}
if (view.chatWidth) {
	self.set(&quot;width&quot;, view.chatWidth);
} 
if (view.chatheight) {
	self.set(&quot;height&quot;, view.chatheight);
}


self.createLink = function(template, group) {
	var content = chatTextArea.get(&quot;value&quot;);
	var Chat = self;
	var data =&quot;&quot;;
	var script = &quot;&quot;;
	var style = &quot;&quot;;
	var tip = &quot;&quot;;
	if (template) {	
		try {
			data = JSON.parse(content);
		} catch(e){}
		var html = template.get(&quot;html&quot;);
		if (html) {
			var parts = html.split(&quot;&lt;!---->\n&quot;);
			if (parts.length === 3 &amp;&amp; parts[2]) {
				var context = {
				}
				try {
					context.data = data;
				} 
				catch (e) {
				}
				var _temp = _.templateSettings
				_.templateSettings = {
					interpolate: /\{\{(.+?)\}\}/g,
					evaluate: /\{\{\((.+?)\)\}\}/g,
					escape: /\{\{-(.+?)\}\}/g
				};
				tip = _.template(parts[2])(context);
				_.templateSettings = _temp;
			}
		}
		var css = template.get(&quot;css&quot;);
		if (css) {
			if (parts.length === 3) {
				var parts = css.split(&quot;/****/\n&quot;);
				tip += &quot;&lt;style type='text/css'>&quot; + parts[2] + &quot;&lt;\/style>&quot;;
			}
		}
		var javascript = template.get(&quot;javascript&quot;);
		if (javascript) {
			var parts = javascript.split(&quot;/****/\n&quot;);
			if (parts.length === 3) {
				script = parts[2];
			}
		}
	}
	var getContent = function() {
		return chatTextArea.get(&quot;value&quot;);
	}
	var message = {
		type: &quot;message&quot;,
		templateId: template.get(&quot;id&quot;),
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;),
		all: group.get(&quot;all&quot;),
		content: content,
		senderGroupMember: {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			nickname: &quot;${loginUser.nickname}&quot;
		}
	};


	var link = new dorado.widget.Control({
		style: {
			float: &quot;right&quot;
		},
		tip: tip ? &quot;&quot; : template.get(&quot;name&quot;), 
		exClassName: &quot;message-tool &quot; + template.get(&quot;icon&quot;),
		onClick: function(self, arg) {
			if (tip) {
				if (tipControl.get(&quot;actualVisible&quot;)) {
					tipControl.hide();
				} else {
					tipControl.show({
						anchorTarget: self,
						vAlign: &quot;top&quot;,
						align: &quot;center&quot;,
						offsetTop: -15
						
					});
				}
				
			}
			if (script) {
				eval(&quot;(function(){&quot;+ script +&quot;})();&quot;);
			}
			if (template.get(&quot;url&quot;)) {
				chatarea.set(&quot;visible&quot;, false);
				workarea.set(&quot;visible&quot;, true);
				linkIFrame.set(&quot;path&quot;, template.get(&quot;url&quot;));
				linkIFrame.reload();
			}
		}
	});
	
	links.addChild(link);
	if (tip) {
		var tipControl = new dorado.widget.ToolTip({
			content: tip,
			anchorToTarget: true,
			arrowDirection: &quot;bottom&quot;,
			arrowAlign: &quot;center&quot;,
			className: &quot;d-tip function-tip&quot;,
			shadowMode: &quot;frame&quot;
		});
		links.addChild(tipControl);
		var tipDom = tipControl.getDom();
	}
	
	var dom = link.getDom();
	
}


</ClientEvent>
      <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
      <Property name="modal">false</Property>
      <Property name="width">100%</Property>
      <Property name="height">100%</Property>
      <Property name="showCaptionBar">false</Property>
      <Property name="exClassName">chat</Property>
      <Property name="collapseable">false</Property>
      <Property name="minimizeable">false</Property>
      <Property name="maximizeable">true</Property>
      <Property name="maximized">false</Property>
      <Property name="floating">true</Property>
      <Property name="animateType">fade</Property>
      <Property name="shadowMode">frame</Property>
      <Buttons/>
      <Children>
        <Container>
          <Container layoutConstraint="top">
            <ClientEvent name="onDoubleClick" signature="self,arg,Chat">if (view.chatFloating !== false) {
	Chat.hide();
	if (Chat.get(&quot;width&quot;) == &quot;100%&quot;) {
		Chat.set({
			width: &quot;700&quot;,
			height: &quot;560&quot;
		});
		Chat.show(function() {
			Chat.set({
				width: &quot;701&quot;,
				height: &quot;560&quot;
			});
		});
	} else {
		Chat.set({
			width: &quot;100%&quot;,
			height: &quot;100%&quot;
		});
		Chat.show();
	}
	
}
</ClientEvent>
            <Property name="height">50</Property>
            <Property name="className">header</Property>
            <Container layout="hbox align:center;pack:center" layoutConstraint="left">
              <Property name="width">180</Property>
              <TextEditor layoutConstraint="left">
                <ClientEvent name="onKeyDown" signature="self,arg,chatOption,activeGroupList,userResult,dsUser">if (arg.keyCode === 13) {
	return;
}
if (self.userQueryTask) {
	window.clearTimeout(self.userQueryTask);
}
self.userQueryTask = window.setTimeout(function() {
	chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
	var key = self.get(&quot;value&quot;);
	if (key) {
		activeGroupList.set(&quot;visible&quot;, false);
		userResult.set(&quot;visible&quot;, true);
		dsUser.set(&quot;parameter&quot;, {
			usernameOrNickname: key,
			memberId: &quot;${loginUsername}&quot;
		}).flushAsync();
	}
	else {
		activeGroupList.set(&quot;visible&quot;, true);
		userResult.set(&quot;visible&quot;, false);
	}
}, 150);</ClientEvent>
                <Property name="exClassName">search-text</Property>
                <Property name="width">140</Property>
                <Property name="style">
                  <Property name="margin-top">2px</Property>
                </Property>
              </TextEditor>
            </Container>
            <Container layout="hbox pack:center;align:center">
              <ClientEvent name="onReady" signature="self,arg,cardBookChat">self.clickProxy = function(c, index) {
	if (self.current === c) {
		return;
	}
	var current = self.current;
	var temp = current.get(&quot;userData&quot;);
	current.set(&quot;userData&quot;, current.get(&quot;exClassName&quot;));
	current.set(&quot;exClassName&quot;, temp);
	
	temp = c.get(&quot;userData&quot;);
	c.set(&quot;userData&quot;, c.get(&quot;exClassName&quot;));
	c.set(&quot;exClassName&quot;, temp);
	
	self.current = c;
	
	cardBookChat.set(&quot;currentIndex&quot;, index);
}
</ClientEvent>
              <Property name="exClassName">options</Property>
              <Property name="contentOverflow">hidden</Property>
              <Control id="chatOption">
                <ClientEvent name="onReady">self.get(&quot;parent&quot;).current = self;
</ClientEvent>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 0);
</ClientEvent>
                <Property name="exClassName">fa fa-comment green-text</Property>
                <Property name="userData">fa fa-comment-o</Property>
                <Property name="tags">option</Property>
                <Property name="metaData">
                  <Property name="key"></Property>
                </Property>
              </Control>
              <Control>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 1);</ClientEvent>
                <Property name="exClassName">fa fa-sun-o</Property>
                <Property name="userData">fa fa-certificate green-text</Property>
                <Property name="tags">option</Property>
              </Control>
              <Control>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 2);</ClientEvent>
                <Property name="exClassName">fa fa-square-o
</Property>
                <Property name="userData">fa fa-square green-text</Property>
                <Property name="tags">option</Property>
              </Control>
            </Container>
            <Container layout="hbox pack:end;align:center;stretch:true" layoutConstraint="right">
              <Property name="width">180</Property>
              <Property name="exClassName">options</Property>
              <Property name="contentOverflow">hidden</Property>
              <Control>
                <Property name="exClassName">avatar fa fa-globe</Property>
                <Property name="ignored">true</Property>
              </Control>
              <Control id="exitBtn">
                <ClientEvent name="onClick" signature="self,arg,Chat">Chat.onChatCloseListeners.each(function(l) {
	l();
});
</ClientEvent>
                <Property name="exClassName">fa fa-times-circle</Property>
              </Control>
            </Container>
          </Container>
          <CardBook id="cardBookChat" layoutConstraint="center">
            <Container>
              <DataSet id="dsGlobalTemplate">
                <Property name="dataType">[Template]</Property>
                <Property name="dataProvider">templateController#loadGlobal</Property>
                <Property name="loadMode">preload</Property>
              </DataSet>
              <DataSet id="dsWithoutFunction">
                <Property name="dataType">[Template]</Property>
                <Property name="dataProvider">templateController#loadByLikeName</Property>
                <Property name="pageSize">10</Property>
                <Property name="loadMode">manual</Property>
              </DataSet>
              <DataSet id="dsWithoutSystemGroup">
                <Property name="dataType">[Group]</Property>
                <Property name="dataProvider">groupController#loadWithoutSystemGroups</Property>
                <Property name="pageSize">15</Property>
                <Property name="parameter">
                  <Entity>
                    <Property name="memberId">${loginUsername}</Property>
                    <Property name="groupName"></Property>
                  </Entity>
                </Property>
              </DataSet>
              <DataSet id="dsSystemGroup">
                <Property name="dataType">[Group]</Property>
                <Property name="dataProvider">groupController#loadSystemGroups</Property>
                <Property name="pageSize">15</Property>
                <Property name="parameter">
                  <Entity>
                    <Property name="memberId">${loginUsername}</Property>
                    <Property name="groupName"></Property>
                  </Entity>
                </Property>
              </DataSet>
              <DataSet id="dsUnselectedUser">
                <Property name="dataType">[User]</Property>
                <Property name="dataProvider">noticeController#loadUnselectedUsers</Property>
                <Property name="pageSize">10</Property>
                <Property name="loadMode">manual</Property>
              </DataSet>
              <DataSet id="dsPLG">
                <Property name="dataType">ActiveGroup</Property>
                <Property name="dataProvider">groupController#loadPrivateLetterGroup</Property>
              </DataSet>
              <DataSet id="dsAG">
                <Property name="dataType">ActiveGroup</Property>
                <Property name="dataProvider">groupController#loadActiveGroup</Property>
              </DataSet>
              <DataSet id="dsUser">
                <Property name="dataType">[User]</Property>
                <Property name="dataProvider">noticeController#loadUsers</Property>
                <Property name="pageSize">10</Property>
                <Property name="loadMode">manual</Property>
              </DataSet>
              <DataSet id="dsGroup">
                <ClientEvent name="onLoadData" signature="self,arg,splitPanelGroupDetails">if (self.getData().entityCount > 0) {
	splitPanelGroupDetails.set(&quot;visible&quot;, true);
}
</ClientEvent>
                <Property name="dataType">[Group]</Property>
                <Property name="dataProvider">groupController#loadGroups</Property>
                <Property name="parameter">${loginUsername}</Property>
              </DataSet>
              <DataSet id="dsActiveGroup">
                <ClientEvent name="onLoadData" signature="self,arg,dsGlobalTemplate,Chat">var group = self.getData(&quot;#&quot;);
if (group) {
	dsGlobalTemplate.getData().each(function(t) {
		if (t.get(&quot;displayable&quot;)) {
			Chat.createLink(t, group);
		}
	});
	group.get(&quot;functions&quot;).each(function(t) {
		if (t.get(&quot;displayable&quot;) &amp;&amp; !t.get(&quot;offline&quot;)) {
			Chat.createLink(t, group);
		}
	});
}

</ClientEvent>
                <Property name="dataType">[ActiveGroup]</Property>
                <Property name="dataProvider">groupController#loadActiveGroups</Property>
                <Property name="parameter">${loginUsername}</Property>
              </DataSet>
              <SplitPanel>
                <Property name="position">180</Property>
                <MainControl>
                  <Container>
                    <SplitPanel id="chatarea">
                      <Property name="position">150</Property>
                      <Property name="direction">bottom</Property>
                      <Property name="hideMode">display</Property>
                      <MainControl>
                        <Container>
                          <Control id="yourTitle" layoutConstraint="top">
                            <Property name="exClassName">your-title</Property>
                          </Control>
                          <DataListBox>
                            <ClientEvent name="onRenderRow" signature="self,arg,dsActiveGroup,Chat">$(arg.dom).empty();
var group = dsActiveGroup.getData(&quot;#&quot;);
var my = arg.data.get(&quot;sender&quot;) === &quot;${loginUsername}&quot;;
var name = &quot;&quot;;
var script = &quot;&quot;;
var message = &quot;&quot;;
var data = &quot;&quot;;
var content = &quot;&quot;;
var style = &quot;;&quot;
var template = Chat.getTemplate(arg.data.toJSON(), group);
console.log(template)

if (template) {
	
	message = arg.data.toJSON();

	try {
		data = JSON.parse(arg.data.get(&quot;content&quot;));
	} catch(e){}
	var html = template.get(&quot;html&quot;);
	if (html) {
		var parts = html.split(&quot;&lt;!---->\n&quot;);
		var context = {
			message: message
		}
		try {
			context.data = data;
		} catch(e){}
		var _temp = _.templateSettings
		_.templateSettings = {
	  		interpolate: /\{\{(.+?)\}\}/g,
			evaluate: /\{\{\((.+?)\)\}\}/g,
			escape: /\{\{-(.+?)\}\}/g
		};
		content = _.template(parts[0])(context);
		_.templateSettings = _temp;
	}
	var css = template.get(&quot;css&quot;);
	if (css) {
		var parts = css.split(&quot;/****/\n&quot;);
		style = &quot;&lt;style type='text/css'>&quot; + parts[0] + &quot;&lt;\/style>&quot;;
	}
	var javascript = template.get(&quot;javascript&quot;);
	if (javascript) {
		var parts = javascript.split(&quot;/****/\n&quot;);
		script = parts[0];
	}
}

var tip = new dorado.widget.Tip({
	content: (content || arg.data.get(&quot;content&quot;).replace(/\n/g, &quot;&lt;br>&quot;)) + style,
	floating: false,
	arrowDirection: (my ? &quot;right&quot; : &quot;left&quot;) + (group.get(&quot;memberCount&quot;) > 2 ? &quot; group&quot; : &quot;&quot;),
	arrowAlign: &quot;top&quot;
});
var avatar = new dorado.widget.Control({
	exClassName: &quot;message-avatar &quot; + (my ? &quot;right&quot; : &quot;left&quot;)
});

if (my) {
	name = &quot;${loginUser.nickname}&quot;;
} else {
	name = arg.data.get(&quot;senderGroupMember.nickname&quot;);
}
$(avatar.getDom()).text(name[0].toLocaleUpperCase());

if (group.get(&quot;memberCount&quot;) > 2) {
	var nickname = new dorado.widget.Control({
		exClassName: &quot;message-nickname &quot; + (my ? &quot;right&quot; : &quot;left&quot;)
	});
	$(nickname.getDom()).text(name);
	nickname.render(arg.dom);
}

avatar.render(arg.dom);
tip.render(arg.dom);
if (script) {
	eval(&quot;(function(){&quot;+ script +&quot;})();&quot;)	
}

</ClientEvent>
                            <Property name="dataSet">dsActiveGroup</Property>
                            <Property name="dataPath">#.notices</Property>
                            <Property name="property">content</Property>
                            <Property name="highlightCurrentRow">false</Property>
                            <Property name="highlightHoverRow">false</Property>
                            <Property name="className">message-list</Property>
                          </DataListBox>
                        </Container>
                      </MainControl>
                      <SideControl>
                        <Container>
                          <Property name="contentOverflow">hidden</Property>
                          <Container layoutConstraint="top">
                            <Property name="height">30</Property>
                            <Property name="contentOverflow">hidden</Property>
                            <Property name="hideMode">display</Property>
                            <Property name="exClassName">function-tools</Property>
                            <Container id="links" layout="hbox align:center;pack:start">
                              <Property name="contentOverflow">hidden</Property>
                            </Container>
                          </Container>
                          <TextArea id="chatTextArea">
                            <ClientEvent name="onKeyPress" signature="self,arg,dsActiveGroup,Chat">var content = self.get(&quot;value&quot;);
if (arg.keyCode === 13 &amp;&amp; content &amp;&amp; !arg.shiftKey) {
	var group = dsActiveGroup.getData(&quot;#&quot;);
	if (!group) {
		return;
	} 
	var message = {
		type: &quot;message&quot;,
		templateId: group.get(&quot;templateId&quot;),
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;),
		all: group.get(&quot;all&quot;),
		content: content,
		senderGroupMember: {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			nickname: &quot;${loginUser.nickname}&quot;
		}
	};
	var data =&quot;&quot;;
	var script = &quot;&quot;;
	var style = &quot;&quot;;
	var template = group.get(&quot;template&quot;);
	if (template) {	
		try {
			data = JSON.parse(content);
		} catch(e){}
		var html = template.get(&quot;html&quot;);
		if (html) {
			var parts = html.split(&quot;&lt;!---->\n&quot;);
			if (parts.length === 3) {
				var context = {
					message: message
				}
				try {
					content.data = data;
				} 
				catch (e) {
				}
				var _temp = _.templateSettings
				_.templateSettings = {
					interpolate: /\{\{(.+?)\}\}/g,
					evaluate: /\{\{\((.+?)\)\}\}/g,
					escape: /\{\{-(.+?)\}\}/g
				};
				content = _.template(parts[2])(context);
				_.templateSettings = _temp;
			}
		}
		var css = template.get(&quot;css&quot;);
		if (css) {
			if (parts.length === 3) {
				var parts = css.split(&quot;/****/\n&quot;);
				content += &quot;&lt;style type='text/css'>&quot; + parts[2] + &quot;&lt;\/style>&quot;;
			}
		}
		var javascript = template.get(&quot;javascript&quot;);
		if (javascript) {
			var parts = javascript.split(&quot;/****/\n&quot;);
			if (parts.length === 3) {
				script = parts[2];
			}
		}
	}
	$(&quot;body&quot;).append(&quot;content&quot;);
	if (script) {
		$(&quot;body&quot;).append(&quot;content&quot;);
		eval(&quot;(function(){&quot;+ script +&quot;})();&quot;)
	} else {
		Chat.send(message);
	}
	self.set(&quot;value&quot;, null);
	arg.returnValue = false;
}</ClientEvent>
                            <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
                            <ClientEvent name="onCreate">/*var editor = new Quill(self.getDom());
editor.on(&quot;text-change&quot;, function(delta, oldDelta, source) {
	console.log(delta)
});*/
</ClientEvent>
                            <Property name="exClassName">message-text-area</Property>
                            <Property name="ignored">false</Property>
                          </TextArea>
                        </Container>
                      </SideControl>
                    </SplitPanel>
                    <Container id="workarea">
                      <Property name="hideMode">display</Property>
                      <Property name="visible">false</Property>
                      <IFrame id="linkIFrame"/>
                    </Container>
                  </Container>
                </MainControl>
                <SideControl>
                  <Container>
                    <DataListBox id="activeGroupList">
                      <ClientEvent name="onRenderRow" signature="self,arg,Chat">$(arg.dom).css(&quot;position&quot;, &quot;relative&quot;).empty();
var privateLetter = arg.data.get(&quot;privateLetter&quot;);
var n = &quot;&quot;;
var d = &quot;&quot;;
var script = &quot;&quot;;
var message = &quot;&quot;;
var data = &quot;&quot;;
var icon = arg.data.get(&quot;icon&quot;);
if (privateLetter) {
	n = arg.data.get(&quot;other&quot;).get(&quot;nickname&quot;);
} else {
	n = arg.data.get(&quot;name&quot;) || &quot;无&quot;;
}
var lastNotice = arg.data.get(&quot;lastNotice&quot;);
if (lastNotice) {
	var lastNotice = arg.data.get(&quot;lastNotice&quot;);
	var content = lastNotice.get(&quot;content&quot;);
	var template = arg.data._template;
	if (!template) {
		template = Chat.getTemplate(lastNotice.toJSON(), arg.data)
	}

	if (template) {
		message = lastNotice.toJSON();
		try {
			data = JSON.parse(content);
		} catch(e){}
		var html = template.get(&quot;html&quot;);
		if (html) {
			var parts = html.split(&quot;&lt;!---->\n&quot;);
			if (parts.length > 1) {
				var context = {
					message: message
				}
				try {
					context.data = data;
				} catch(e){}
				var _temp = _.templateSettings
				_.templateSettings = {
			  		interpolate: /\{\{(.+?)\}\}/g,
					evaluate: /\{\{\((.+?)\)\}\}/g,
					escape: /\{\{-(.+?)\}\}/g
				};
				content = _.template(parts[1])(context);
				_.templateSettings = _temp;
			}
		}
		var css = template.get(&quot;css&quot;);
		if (css) {
			var parts = css.split(&quot;/****/\n&quot;);
			if (parts.length > 1 &amp;&amp; parts[1]) {
				content += &quot;&lt;style type='text/css'>&quot; +parts[1] + &quot;&lt;\/style>&quot;;
			}
		}
		var javascript = template.get(&quot;javascript&quot;);
		if (javascript) {
			var parts = css.split(&quot;/****/\n&quot;);
			if (parts.length > 1) {
				script = parts[1];
			}
		}
	}
	d = content || lastNotice.get(&quot;content&quot;);
}

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});

var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

var count = new dorado.widget.Control({
	exClassName: &quot;group-count&quot;
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}
$(name.getDom()).text(n);
$(description.getDom()).html(d);


avatar.render(arg.dom);
name.render(arg.dom);
count.render(arg.dom);
description.render(arg.dom);
if (script) {
	eval(&quot;(function(){&quot;+ script +&quot;})();&quot;)	
}
$(arg.dom).find(&quot;.group-count&quot;).attr(&quot;id&quot;, &quot;group-count-&quot; + arg.data.entityId)
</ClientEvent>
                      <ClientEvent name="onContextMenu" signature="self,arg,menuGroup">if ($(arg.event.target).hasClass(&quot;group-avatar&quot;) || $(arg.event.target).hasClass(&quot;group-name&quot;) || $(arg.event.target).hasClass(&quot;group-description&quot;)) {
	menuGroup.show({
		position: {
			left: arg.event.pageX,
			top: arg.event.pageY
		}
	});
}

</ClientEvent>
                      <ClientEvent name="onDataRowDoubleClick" signature="self,arg,dsActiveGroup,workarea,chatarea,linkIFrame">if (linkIFrame.get(&quot;path&quot;)) {
	workarea.set(&quot;visible&quot;, !workarea.get(&quot;visible&quot;));
	chatarea.set(&quot;visible&quot;, !chatarea.get(&quot;visible&quot;));
	if (workarea.get(&quot;visible&quot;)) {
		if (linkIFrame.get(&quot;path&quot;)) {
			linkIFrame.reload();
		}
	}
}

</ClientEvent>
                      <ClientEvent name="onCurrentChange" signature="self,arg,Chat,links,chatTextArea,dsGlobalTemplate,dsActiveGroup,workarea,chatarea,links,linkIFrame">var current = self.getCurrentItem();

if (current.get(&quot;all&quot;) &amp;&amp; !current.get(&quot;current&quot;)  || current.get(&quot;current&quot;) &amp;&amp; current.get(&quot;current&quot;).get(&quot;readOnly&quot;)) {
	chatTextArea.set(&quot;readOnly&quot;, true);
		links.get(&quot;parent&quot;).set(&quot;visible&quot;, false);
} else {
	chatTextArea.set(&quot;readOnly&quot;, false);
	links.get(&quot;parent&quot;).set(&quot;visible&quot;, true);
}

workarea.set(&quot;visible&quot;, false);
chatarea.set(&quot;visible&quot;, true);

linkIFrame.set(&quot;path&quot;, null)
links.removeAllChildren()
dsGlobalTemplate.getData().each(function(t) {
	if (t.get(&quot;displayable&quot;)) {
		Chat.createLink(t, current);
	}
});
current.get(&quot;functions&quot;).each(function(t) {
	if (t.get(&quot;displayable&quot;) &amp;&amp; !t.get(&quot;offline&quot;)) {
		Chat.createLink(t, current);
	}
});


</ClientEvent>
                      <ClientEvent name="onGetBindingData" signature="self,arg,links,dsActiveGroup,chatTextArea">var current = dsActiveGroup.getData(&quot;#&quot;);
if (!current) {
	return;
}
if (current.get(&quot;all&quot;) &amp;&amp; !current.get(&quot;current&quot;)  || current.get(&quot;current&quot;) &amp;&amp; current.get(&quot;current&quot;).get(&quot;readOnly&quot;)) {
	chatTextArea.set(&quot;readOnly&quot;, true);
	links.get(&quot;parent&quot;).set(&quot;visible&quot;, false);
} else {
	chatTextArea.set(&quot;readOnly&quot;, false);
	links.get(&quot;parent&quot;).set(&quot;visible&quot;, true);
}</ClientEvent>
                      <Property name="dataSet">dsActiveGroup</Property>
                      <Property name="property">name</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                    <DataListBox id="userResult">
                      <ClientEvent name="onDataRowClick" signature="self,arg,dsUser,dsPLG,activeGroupList,userResult,updateActionActiveGroup,dsActiveGroup">var receiver = dsUser.getData(&quot;#&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;other.memberId&quot;) === receiver.get(&quot;username&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
} else {
	dsPLG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		otherId: receiver.get(&quot;username&quot;)
	}).flushAsync(function(data) {
		if (data) {
			var json = data.toJSON();
			json.other = {
				memberId: receiver.get(&quot;username&quot;),
				nickname: receiver.get(&quot;nickname&quot;),
				active: true
			};
			group = groups.insert(json, &quot;begin&quot;);
			group.setState(dorado.Entity.STATE_NONE);
		} else {
			var group = groups.insert({
				privateLetter: true,
				memberCount: 2,
				creator: &quot;${loginUsername}&quot;,
				other: {
					memberId: receiver.get(&quot;username&quot;),
					nickname: receiver.get(&quot;nickname&quot;),
					active: true
				}
			}, &quot;begin&quot;);
			group.createChild(&quot;members&quot;, {
				memberId: &quot;${loginUsername}&quot;,
				nickname: &quot;${loginUser.nickname}&quot;,
				active: true
			});
			group.createChild(&quot;members&quot;, {
				memberId: receiver.get(&quot;username&quot;),
				nickname: receiver.get(&quot;nickname&quot;),
				active: true
			});
			updateActionActiveGroup.execute();
					
		}
	});
}

activeGroupList.set(&quot;visible&quot;, true);
userResult.set(&quot;visible&quot;, false);
</ClientEvent>
                      <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;username&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);</ClientEvent>
                      <Property name="dataSet">dsUser</Property>
                      <Property name="property">nickname</Property>
                      <Property name="visible">false</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                  </Container>
                </SideControl>
              </SplitPanel>
              <Menu id="menuGroup">
                <MenuItem>
                  <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,ajaxActionFreezeGroup">var group = dsActiveGroup.getData(&quot;#&quot;);
ajaxActionFreezeGroup.set(&quot;parameter&quot;, {
	groupId: group.get(&quot;id&quot;),
	memberId: &quot;${loginUsername}&quot;
}).execute(function() {
	group.remove(true);
});
</ClientEvent>
                  <Property name="caption">删除</Property>
                  <Property name="iconClass">fa fa-minus</Property>
                </MenuItem>
              </Menu>
              <UpdateAction id="updateActionActiveGroup">
                <Property name="dataResolver">groupController#save</Property>
                <UpdateItem>
                  <Property name="dataSet">dsActiveGroup</Property>
                </UpdateItem>
              </UpdateAction>
              <UpdateAction id="updateActionGroup">
                <Property name="dataResolver">groupController#save</Property>
                <UpdateItem>
                  <Property name="dataSet">dsGroup</Property>
                </UpdateItem>
              </UpdateAction>
              <AjaxAction id="ajaxActionFreezeGroup">
                <Property name="service">groupController#freezeGroup</Property>
              </AjaxAction>
              <AjaxAction id="ajaxActionJoinGroup">
                <Property name="service">groupController#joinGroup</Property>
              </AjaxAction>
              <AjaxAction id="ajaxActionExitGroup">
                <Property name="service">groupController#exitGroup</Property>
              </AjaxAction>
            </Container>
            <Container>
              <SplitPanel>
                <Property name="position">180</Property>
                <MainControl>
                  <Container>
                    <SplitPanel id="splitPanelGroupDetails">
                      <Property name="position">275</Property>
                      <Property name="direction">top</Property>
                      <Property name="visible">false</Property>
                      <MainControl>
                        <Container>
                          <DataListBox>
                            <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;memberId&quot;);


var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar green-background&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;
});



$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

var l;
var cls =&quot;&quot;;
var administrator = arg.data.get(&quot;administrator&quot;);
if (administrator) {
	if (arg.data.get(&quot;memberId&quot;) === arg.data.parent.parent.get(&quot;creator&quot;)) {
		l = &quot;群主&quot;;
		cls = &quot; group-creator&quot;
	} else {
		l = &quot;管理员&quot;;
	}
	var label = new dorado.widget.Control({
		exClassName: &quot;group-label&quot; + cls,
	});
	$(label.getDom()).text(l);
	label.render(name.getDom());	
}

var readOnly = arg.data.get(&quot;readOnly&quot;);
if (readOnly) {
	var label = new dorado.widget.Control({
		exClassName: &quot;group-label group-member-read-only&quot;,
	});
	$(label.getDom()).text(&quot;禁止发言&quot;);
	label.render(name.getDom());	
}


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
</ClientEvent>
                            <ClientEvent name="onDataRowDoubleClick" signature="self,arg,dsGroup,chatOption,dsPLG,activeGroupList,userResult,updateActionActiveGroup,dsActiveGroup">var member = dsGroup.getData(&quot;#.#members&quot;);
var groups = dsActiveGroup.getData();
var group = null;
if (member.get(&quot;memberId&quot;) === &quot;${loginUsername}&quot;) {
	return;
}
groups.each(function(g) {
	if (g.get(&quot;other.memberId&quot;) === member.get(&quot;memberId&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
} else {
	dsPLG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		otherId: member.get(&quot;memberId&quot;)
	}).flushAsync(function(data) {
		if (data) {
			group = groups.insert(data.toJSON(), &quot;begin&quot;);
			group.setState(dorado.Entity.STATE_NONE);
		} else {
			var group = groups.insert({
				privateLetter: true,
				creator: &quot;${loginUsername}&quot;,
				other: {
					memberId: member.get(&quot;memberId&quot;),
					nickname: member.get(&quot;nickname&quot;),
					active: true
				}
			}, &quot;begin&quot;);
			group.createChild(&quot;members&quot;, {
				memberId: &quot;${loginUsername}&quot;,
				nickname: &quot;${loginUser.nickname}&quot;,
				active: true
			});
			group.createChild(&quot;members&quot;, {
				memberId: member.get(&quot;memberId&quot;),
				nickname: member.get(&quot;nickname&quot;),
				active: true
			});
			updateActionActiveGroup.execute();
					
		}
	});
}

activeGroupList.set(&quot;visible&quot;, true);
userResult.set(&quot;visible&quot;, false);
chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});


</ClientEvent>
                            <ClientEvent name="onContextMenu" signature="self,arg,readOnlySettings,adminSettings,menuGroupMember">if ($(arg.event.target).hasClass(&quot;group-avatar&quot;) || $(arg.event.target).hasClass(&quot;group-name&quot;) || $(arg.event.target).hasClass(&quot;group-description&quot;)) {
	var gm = self.getCurrentItem();
	var g = gm.parent.parent;
	var administrator = gm.get(&quot;administrator&quot;);
	if (g.get(&quot;current.administrator&quot;) &amp;&amp; gm.get(&quot;memberId&quot;) !== g.get(&quot;creator&quot;)) {
		adminSettings.set(&quot;visible&quot;, true);
		readOnlySettings.set(&quot;visible&quot;, true);
		if (gm.get(&quot;administrator&quot;)) {
			adminSettings.set(&quot;caption&quot;, &quot;取消管理员身份&quot;);
		} else {
			adminSettings.set(&quot;caption&quot;, &quot;设置为管理员身份&quot;);
		}
		
		if (gm.get(&quot;readOnly&quot;)) {
			readOnlySettings.set({
				caption: &quot;允许发言&quot;,
				iconClass: &quot;fa fa-microphone&quot;
			});
		} else {
			readOnlySettings.set({
				caption: &quot;禁止发言&quot;,
				iconClass: &quot;fa fa-microphone-slash&quot;
			});
		}
		menuGroupMember.show({
			position: {
				left: arg.event.pageX,
				top: arg.event.pageY
			}
		});
	}
}

</ClientEvent>
                            <Property name="dataSet">dsGroup</Property>
                            <Property name="property">name</Property>
                            <Property name="hideMode">display</Property>
                            <Property name="highlightHoverRow">false</Property>
                            <Property name="dataPath">#.members</Property>
                            <Property name="highlightCurrentRow">false</Property>
                          </DataListBox>
                          <Container id="memberPageContainer" layout="hbox regionPadding:8;pack:center" layoutConstraint="bottom">
                            <Property name="hideMode">display</Property>
                            <Property name="height">40</Property>
                            <DataPilot>
                              <Property name="itemCodes">&lt;,></Property>
                              <Property name="dataSet">dsGroup</Property>
                              <Property name="dataPath">#.members</Property>
                              <Property name="style">
                                <Property name="padding">0</Property>
                              </Property>
                            </DataPilot>
                          </Container>
                          <Menu id="menuGroupMember">
                            <MenuItem id="readOnlySettings">
                              <ClientEvent name="onClick" signature="self,arg,dsGroup">var gm = dsGroup.getData(&quot;#.#members&quot;);
if (gm.get(&quot;readOnly&quot;)) {
	gm.set(&quot;readOnly&quot;, false);
} else {
	gm.set(&quot;readOnly&quot;, true);
}
</ClientEvent>
                              <Property name="iconClass">fa fa-microphone-slash</Property>
                            </MenuItem>
                            <MenuItem id="adminSettings">
                              <ClientEvent name="onClick" signature="self,arg,dsGroup">var gm = dsGroup.getData(&quot;#.#members&quot;);
if (gm.get(&quot;administrator&quot;)) {
	gm.set(&quot;administrator&quot;, false);
} else {
	gm.set(&quot;administrator&quot;, true);
}
</ClientEvent>
                              <Property name="iconClass">fa fa-wrench</Property>
                            </MenuItem>
                            <Separator/>
                            <MenuItem>
                              <ClientEvent name="onClick" signature="self,arg,dsGroup,updataActionGroup">var gm = dsGroup.getData(&quot;#.#members&quot;);
dorado.MessageBox.confirm(&quot;确定要删除【&quot;+ gm.get(&quot;nickname&quot;) +&quot;】成员吗？&quot;, function() {
	gm.remove();
	updataActionGroup.execute();
});

</ClientEvent>
                              <Property name="caption">删除</Property>
                              <Property name="iconClass">fa fa-minus</Property>
                            </MenuItem>
                          </Menu>
                        </Container>
                      </MainControl>
                      <SideControl>
                        <Container>
                          <Container>
                            <AutoForm layoutConstraint="left">
                              <Property name="dataSet">dsGroup</Property>
                              <Property name="cols">*,*,*</Property>
                              <Property name="labelAlign">right</Property>
                              <Property name="width">330</Property>
                              <Property name="showHint">false</Property>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">icon</Property>
                                <Property name="property">icon</Property>
                                <Property name="editorType">Label</Property>
                                <Editor>
                                  <Label>
                                    <ClientEvent name="onRefreshDom" signature="self,arg,dialogIcon,splitPanelGroupDetails,dsGroup,groupDeleteBtn,groupSaveBtn">if (!dsGroup.get(&quot;dataLoaded&quot;)) {
	return;
}
if (!dsGroup.getData(&quot;#&quot;)) {
	splitPanelGroupDetails.set(&quot;visible&quot;, false);
	return;
}
$(arg.dom).empty();
splitPanelGroupDetails.set(&quot;visible&quot;, true);

var icon = new dorado.widget.Control({
	exClassName: &quot;group-icon group-icon-control fa-2x &quot; + (dsGroup.getData(&quot;#&quot;).get(self.get(&quot;property&quot;)) || &quot;fa fa-plus select-icon&quot;)
});
icon.render(arg.dom);

$(arg.dom).find(&quot;.group-icon&quot;).on(&quot;click&quot;, function() {
	dialogIcon.show();
	dialogIcon.addOnIconSelectedListener(function(s, a) {
		dsGroup.getData(&quot;#&quot;).set(self.get(&quot;property&quot;), a.iconClass);
		s.clearOnIconSelectedListener();
	});
})

if (!dsGroup.getData(&quot;#.current.administrator&quot;)) {
	self.set(&quot;parent.parent.readOnly&quot;, true);
	groupSaveBtn.set(&quot;visible&quot;, false);
	groupDeleteBtn.set(&quot;visible&quot;, false);
	return;
}

self.set(&quot;parent.parent.readOnly&quot;, false);
groupSaveBtn.set(&quot;visible&quot;, true);
groupDeleteBtn.set(&quot;visible&quot;, true);

</ClientEvent>
                                  </Label>
                                </Editor>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">name</Property>
                                <Property name="property">name</Property>
                                <Property name="editorType">Label</Property>
                                <Editor>
                                  <Label>
                                    <ClientEvent name="onRefreshDom" signature="self,arg,splitPanelGroupDetails,dsGroup,groupDeleteBtn,groupSaveBtn">if (!dsGroup.get(&quot;dataLoaded&quot;) || !dsGroup.getData(&quot;#.current.administrator&quot;)) {
	return;
}

var edit = new dorado.widget.Control({
	exClassName: &quot;group-name-edit edit-control fa fa-pencil-square-o&quot;
});
$(arg.dom).find(&quot;.group-name-edit&quot;).remove();
edit.render(arg.dom);

$(arg.dom).find(&quot;.group-name-edit&quot;).on(&quot;click&quot;, function() {
	var input = $(&quot;&lt;input class='float-text-editor'>&quot;);
	$(arg.dom).append(input);
	var value = dsGroup.getData(&quot;#&quot;).get(self.get(&quot;property&quot;))
	input.val(value)
	input.focus();
	input.on(&quot;blur&quot;, function() {
		var v = input.val();
		if (v &amp;&amp; v !== value) {
			dsGroup.getData(&quot;#&quot;).set(self.get(&quot;property&quot;), v);
		}
		input.remove();
	})
});


</ClientEvent>
                                  </Label>
                                </Editor>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">creator</Property>
                                <Property name="property">creator</Property>
                                <Property name="editorType">Label</Property>
                                <Editor/>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">createTime</Property>
                                <Property name="property">createTime</Property>
                                <Property name="editorType">Label</Property>
                                <Editor/>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">memberCount</Property>
                                <Property name="property">memberCount</Property>
                                <Property name="editorType">Label</Property>
                                <Editor>
                                  <Label>
                                    <ClientEvent name="onRefreshDom" signature="self,arg,updateActionGroup,dsGroup,dialogUserSelection">if (!dsGroup.get(&quot;dataLoaded&quot;) || !dsGroup.getData(&quot;#.current.administrator&quot;)) {
	return;
}
var manager = new dorado.widget.Label({
	text: &quot;管理&quot;,
	exClassName: &quot;member-manager green-text&quot;
});

$(arg.dom).find(&quot;.member-manager&quot;).remove();
manager.render(arg.dom);

$(arg.dom).find(&quot;.member-manager&quot;).on(&quot;click&quot;, function() {
	var group = dsGroup.getData(&quot;#&quot;);
	if (group.state === dorado.Entity.STATE_NEW) {
		updateActionGroup.execute(function() {
			dialogUserSelection.show();
		});
	} else {
		dialogUserSelection.show();
	}
	return false;
});
</ClientEvent>
                                  </Label>
                                </Editor>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">functionCount</Property>
                                <Property name="property">functionCount</Property>
                                <Property name="editorType">Label</Property>
                                <Editor>
                                  <Label>
                                    <ClientEvent name="onRefreshDom" signature="self,arg,updateActionGroup,dsGroup,dialogFunction">if (!dsGroup.get(&quot;dataLoaded&quot;) || !dsGroup.getData(&quot;#.current.administrator&quot;)) {
	return;
}
var group = dsGroup.getData(&quot;#&quot;);
if (group.get(&quot;template&quot;)) {
	$(arg.dom).append(&quot;&lt;span style='margin-left:4px;background:#2185d0;color:#fff;padding:2px 4px;display:inline-black;border-radius:3px;'>&quot;+ group.get(&quot;template&quot;).get(&quot;name&quot;) +&quot;&lt;/span>&quot;)
}
var manager = new dorado.widget.Label({
	text: &quot;管理&quot;,
	exClassName: &quot;link-manager green-text&quot;
});

$(arg.dom).find(&quot;.link-manager&quot;).remove();
manager.render(arg.dom);

$(arg.dom).find(&quot;.link-manager&quot;).on(&quot;click&quot;, function() {
	var group = dsGroup.getData(&quot;#&quot;);
	if (group.state === dorado.Entity.STATE_NEW) {
		updateActionGroup.execute(function() {
			dialogFunction.show();
		});
	} else {
		dialogFunction.show();
	}
	group.set(&quot;functionCount&quot;, 0);
	return false;
});
</ClientEvent>
                                  </Label>
                                </Editor>
                              </AutoFormElement>
                              <AutoFormElement layoutConstraint="colSpan:3">
                                <Property name="name">description</Property>
                                <Property name="property">description</Property>
                                <Property name="editorType">Label</Property>
                                <Editor>
                                  <Label>
                                    <ClientEvent name="onRefreshDom" signature="self,arg,splitPanelGroupDetails,dsGroup,groupDeleteBtn,groupSaveBtn">if (!dsGroup.get(&quot;dataLoaded&quot;) || !dsGroup.getData(&quot;#.current.administrator&quot;)) {
	return;
}
var value = dsGroup.getData(&quot;#&quot;).get(self.get(&quot;property&quot;))

if (!value) {
	$(arg.dom).text(&quot;请输入群描述&quot;);
}


var edit = new dorado.widget.Control({
	exClassName: &quot;group-description-edit edit-control fa fa-pencil-square-o&quot;
});
$(arg.dom).find(&quot;.group-description-edit&quot;).remove();
edit.render(arg.dom);

$(arg.dom).find(&quot;.group-description-edit&quot;).on(&quot;click&quot;, function() {
	var input = $(&quot;&lt;input class='float-text-editor'>&quot;);
	$(arg.dom).append(input);
	var value = dsGroup.getData(&quot;#&quot;).get(self.get(&quot;property&quot;))
	input.val(value)
	input.focus();
	input.on(&quot;blur&quot;, function() {
		var v = input.val();
		if (v &amp;&amp; v !== value) {
			dsGroup.getData(&quot;#&quot;).set(self.get(&quot;property&quot;), v);
		}
		input.remove();
	})
});


</ClientEvent>
                                  </Label>
                                </Editor>
                              </AutoFormElement>
                              <AutoFormElement>
                                <Property name="name">all</Property>
                                <Property name="property">all</Property>
                                <Editor/>
                              </AutoFormElement>
                              <AutoFormElement>
                                <Property name="name">temporary</Property>
                                <Property name="property">temporary</Property>
                                <Editor/>
                              </AutoFormElement>
                              <AutoFormElement>
                                <Property name="name">system</Property>
                                <Property name="property">system</Property>
                                <Editor/>
                              </AutoFormElement>
                            </AutoForm>
                            <Container layout="hbox regionPadding:8;align:top;pack:end;padding:16">
                              <Button id="groupDeleteBtn">
                                <ClientEvent name="onClick" signature="self,arg,dsGroup,updateActionGroup">var group = dsGroup.getData(&quot;#&quot;);
dorado.MessageBox.confirm(&quot;确定要删除“&quot; + group.get(&quot;name&quot;) + &quot;”群组吗？&quot;, function() {
	group.remove();
	updateActionGroup.execute();
});
</ClientEvent>
                                <Property name="caption">删除</Property>
                                <Property name="width">60</Property>
                                <Property name="ui">decline</Property>
                              </Button>
                              <Button id="groupSaveBtn">
                                <Property name="caption">保存</Property>
                                <Property name="width">60</Property>
                                <Property name="action">updateActionGroup</Property>
                              </Button>
                            </Container>
                          </Container>
                        </Container>
                      </SideControl>
                    </SplitPanel>
                  </Container>
                </MainControl>
                <SideControl>
                  <Container>
                    <Control>
                      <Property name="height">5</Property>
                    </Control>
                    <Container layout="hbox pack:center;align:center;regionPadding:8;padding:10" layoutConstraint="top">
                      <Property name="contentOverflow">hidden</Property>
                      <Button>
                        <ClientEvent name="onClick" signature="self,arg,splitPanelGroupDetails,dsGroup,dialogUserSelection">var current = {
	memberId: &quot;${loginUsername}&quot;,
	nickname: &quot;${loginUser.nickname}&quot;,
	administrator: true
};
var group = dsGroup.insert({
	name: &quot;请输入群组名称&quot;,
	creator: &quot;${loginUsername}&quot;,
	current: current,
	memberCount: 1
}, &quot;begin&quot;);
group.createChild(&quot;members&quot;, current);
splitPanelGroupDetails.set(&quot;visible&quot;, true);
</ClientEvent>
                        <Property name="caption">创建群</Property>
                        <Property name="style">
                          <Property name="width">60px</Property>
                        </Property>
                      </Button>
                      <Button>
                        <ClientEvent name="onClick" signature="self,arg,dialogSystemGroup">dialogSystemGroup.show();
</ClientEvent>
                        <Property name="caption">加入群</Property>
                        <Property name="style">
                          <Property name="width">60px</Property>
                        </Property>
                      </Button>
                    </Container>
                    <DataListBox id="groupList">
                      <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = arg.data.get(&quot;description&quot;) || '';
var icon = arg.data.get(&quot;icon&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
</ClientEvent>
                      <ClientEvent name="onDataRowDoubleClick" signature="self,arg,dsGroup,chatOption,dsAG,activeGroupList,userResult,dsActiveGroup">var current = dsGroup.getData(&quot;#&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;id&quot;) === current.get(&quot;id&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
	chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
} else {
	dsAG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		groupId: current.get(&quot;id&quot;)
	}).flushAsync(function(data) {
		group = groups.insert(data.toJSON(), &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
		activeGroupList.set(&quot;visible&quot;, true);
		userResult.set(&quot;visible&quot;, false);
		chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
	});
}

</ClientEvent>
                      <Property name="dataSet">dsGroup</Property>
                      <Property name="property">name</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                    <Dialog id="dialogUserSelection">
                      <ClientEvent name="onShow" signature="self,arg,dsGroup,dsUnselectedUser">var group = dsGroup.getData(&quot;#&quot;);
dsUnselectedUser.set(&quot;parameter&quot;, {
	groupId: group.get(&quot;id&quot;),
	memberId: &quot;${loginUsername}&quot;,
}).flushAsync();
</ClientEvent>
                      <Property name="width">700</Property>
                      <Property name="height">560</Property>
                      <Property name="showCaptionBar">false</Property>
                      <Property name="exClassName">chat</Property>
                      <Buttons/>
                      <Children>
                        <SplitPanel>
                          <Property name="position">50%</Property>
                          <MainControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsGroup">if (arg.keyCode === 13) {
	return;
}
if (self.queryTask) {
	window.clearTimeout(self.queryTask);
}
self.queryTask = window.setTimeout(function(){
	var members = dsGroup.getData(&quot;#.members&quot;);
	var key = self.get(&quot;value&quot;);
	if (key) {
		members.parameter = {
			groupId: members.parent.get(&quot;id&quot;),
			memberIdOrNickname: key
		};
	} else {
		members.parameter = {
			groupId: members.parent.get(&quot;id&quot;),
			memberIdOrNickname: null
		};
	}
	members.flushAsync();
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,dsUnselectedUser,updateActionGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;memberId&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var remove = new dorado.widget.Control({
	exClassName: &quot;member-remove selection-remove fa fa-times-circle&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
remove.render(arg.dom);

$(arg.dom).find(&quot;.member-remove&quot;).on(&quot;click&quot;, function() {
	arg.data.parent.parent.set(&quot;memberCount&quot;, arg.data.parent.parent.get(&quot;memberCount&quot;) - 1);
	arg.data.parent.parent.setState(dorado.Entity.STATE_NONE);
	arg.data.remove();
	updateActionGroup.execute(function() {
		dsUnselectedUser.insert({
			username: arg.data.get(&quot;memberId&quot;),
			nickname: arg.data.get(&quot;nickname&quot;)
		}, &quot;begin&quot;);
	});
});
</ClientEvent>
                                <Property name="dataSet">dsGroup</Property>
                                <Property name="property">nickname</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                                <Property name="dataPath">#.members</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:8" layoutConstraint="bottom">
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsGroup</Property>
                                  <Property name="dataPath">#.members</Property>
                                </DataPilot>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,dsGroup,dialogUserSelection">dialogUserSelection.hide();
</ClientEvent>
                                  <Property name="caption">关闭</Property>
                                  <Property name="style">
                                    <Property name="width">60</Property>
                                    <Property name="margin-top">3px</Property>
                                  </Property>
                                </Button>
                              </Container>
                            </Container>
                          </MainControl>
                          <SideControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsUnselectedUser,dsGroup">if (arg.keyCode === 13) {
	return;
}
if (self.userQueryTask) {
	window.clearTimeout(self.userQueryTask);
}
self.userQueryTask = window.setTimeout(function(){
	var group = dsGroup.getData(&quot;#&quot;);
	var key = self.get(&quot;value&quot;);
	if (key) {
		dsUnselectedUser.set(&quot;parameter&quot;, {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			usernameOrNickname: key
		}).flushAsync();
	}
	else {
		dsUnselectedUser.set(&quot;parameter&quot;, {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			usernameOrNickname: &quot;&quot;
		}).flushAsync();
	}
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,dsGroup,updateActionGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;username&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var remove = new dorado.widget.Control({
	exClassName: &quot;member-check selection-check fa fa-circle-o&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
remove.render(arg.dom);

$(arg.dom).find(&quot;.member-check&quot;).on(&quot;click&quot;, function() {
	var group = dsGroup.getData(&quot;#&quot;);
	group.set(&quot;memberCount&quot;, group.get(&quot;memberCount&quot;) + 1);
	group.setState(dorado.Entity.STATE_NONE);
	group.createChild(&quot;members&quot;, {
		memberId: arg.data.get(&quot;username&quot;),
		nickname: arg.data.get(&quot;nickname&quot;),
		groupId: group.get(&quot;id&quot;)
	});
	updateActionGroup.execute(function() {
		arg.data.remove();
	});
});
</ClientEvent>
                                <Property name="dataSet">dsUnselectedUser</Property>
                                <Property name="property">nickname</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:16" layoutConstraint="bottom">
                                <Property name="hideMode">display</Property>
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsUnselectedUser</Property>
                                </DataPilot>
                              </Container>
                            </Container>
                          </SideControl>
                        </SplitPanel>
                      </Children>
                      <Tools/>
                    </Dialog>
                    <Dialog id="dialogFunction">
                      <ClientEvent name="onShow" signature="self,arg,dsGroup,dsWithoutFunction">var group = dsGroup.getData(&quot;#&quot;);
dsWithoutFunction.set(&quot;parameter&quot;, {
	groupId: group.get(&quot;id&quot;),
	name: &quot;&quot;,
}).flushAsync();
</ClientEvent>
                      <Property name="width">700</Property>
                      <Property name="height">560</Property>
                      <Property name="showCaptionBar">false</Property>
                      <Property name="exClassName">chat</Property>
                      <Buttons/>
                      <Children>
                        <SplitPanel>
                          <Property name="position">50%</Property>
                          <MainControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10;regionPadding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,updateActionGroup,dsGroup">var group = dsGroup.getData(&quot;#&quot;);
var current  = dsGroup.getData(&quot;#.#functions&quot;);
if (current) {
	group.set({
		templateId: current.get(&quot;id&quot;),
		template: current.toJSON()
	});
	updateActionGroup.execute();
} else {
	dorado.MessageBox.alert(&quot;请先选模版功能（右侧区域）&quot;)
}
</ClientEvent>
                                  <Property name="caption">设置默认消息模版功能</Property>
                                </Button>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,updateActionGroup,dsGroup">var group = dsGroup.getData(&quot;#&quot;);
group.set({
	templateId: null,
	template: null
});
updateActionGroup.execute();
</ClientEvent>
                                  <Property name="caption">清空默认</Property>
                                </Button>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,updateActionGroup,dsGroup,dsWithoutFunction">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = arg.data.get(&quot;description&quot;) || &quot;&quot;;
var icon = arg.data.get(&quot;icon&quot;);
var group = arg.data.parent.parent;
if (group.get(&quot;templateId&quot;) === arg.data.get(&quot;id&quot;)) {
	var defaultControl = new dorado.widget.Control({
		exClassName: &quot;group-default&quot;
	});
	$(defaultControl.getDom()).text(&quot;默认&quot;);
}



var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var remove = new dorado.widget.Control({
	exClassName: &quot;function-remove selection-remove fa fa-times-circle&quot;
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}

$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
remove.render(arg.dom);
if (defaultControl) {
	defaultControl.render(arg.dom);
}

$(arg.dom).find(&quot;.function-remove&quot;).on(&quot;click&quot;, function() {
	dorado.MessageBox.confirm(&quot;确定要移除“&quot; + arg.data.get(&quot;name&quot;) + &quot;”功能吗？&quot;, function() {
		arg.data.remove()
		dsWithoutFunction.getData().insert(arg.data.toJSON(), &quot;begin&quot;);
		updateActionGroup.execute();
		group.set(&quot;functionCount&quot;, 0);
	});
});
</ClientEvent>
                                <Property name="dataSet">dsGroup</Property>
                                <Property name="property">name</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">true</Property>
                                <Property name="dataPath">#.functions</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:8" layoutConstraint="bottom">
                                <Property name="height">40</Property>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,dialogFunction">dialogFunction.hide();

</ClientEvent>
                                  <Property name="caption">关闭</Property>
                                  <Property name="style">
                                    <Property name="width">60</Property>
                                    <Property name="margin-top">3px</Property>
                                  </Property>
                                </Button>
                              </Container>
                            </Container>
                          </MainControl>
                          <SideControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsGroup,dsWithoutFunction">if (arg.keyCode === 13) {
	return;
}
if (self.groupQueryTask) {
	window.clearTimeout(self.groupQueryTask);
}
self.groupQueryTask = window.setTimeout(function(){
	var group = dsGroup.getData(&quot;#&quot;);
	var key = self.get(&quot;value&quot;);
	if (key) {
		dsWithoutFunction.set(&quot;parameter&quot;, {
			name: key,
			groupId: group.get(&quot;id&quot;)
		}).flushAsync();
	}
	else {
		dsWithoutFunction.set(&quot;parameter&quot;, {
			name: &quot;&quot;,
			groupId: group.get(&quot;id&quot;)
		}).flushAsync();
	}
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,dsGroup,updateActionGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = arg.data.get(&quot;description&quot;) || &quot;&quot;;
var icon = arg.data.get(&quot;icon&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var check = new dorado.widget.Control({
	exClassName: &quot;function-check selection-check fa fa-circle-o&quot;
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}

$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
check.render(arg.dom);

$(arg.dom).find(&quot;.function-check&quot;).on(&quot;click&quot;, function() {
	var group = dsGroup.getData(&quot;#&quot;);
	group.get(&quot;functions&quot;).insert(arg.data);
	updateActionGroup.execute();
	group.set(&quot;functionCount&quot;, 0);
});
</ClientEvent>
                                <Property name="dataSet">dsWithoutFunction</Property>
                                <Property name="property">name</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:16" layoutConstraint="bottom">
                                <Property name="hideMode">display</Property>
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsWithoutFunction</Property>
                                </DataPilot>
                              </Container>
                            </Container>
                          </SideControl>
                        </SplitPanel>
                      </Children>
                      <Tools/>
                    </Dialog>
                    <Dialog id="dialogSystemGroup">
                      <Property name="width">700</Property>
                      <Property name="height">560</Property>
                      <Property name="showCaptionBar">false</Property>
                      <Property name="exClassName">chat</Property>
                      <Buttons/>
                      <Children>
                        <SplitPanel>
                          <Property name="position">50%</Property>
                          <MainControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsGroup">if (arg.keyCode === 13) {
	return;
}
if (self.queryTask) {
	window.clearTimeout(self.queryTask);
}
self.queryTask = window.setTimeout(function(){
	var key = self.get(&quot;value&quot;);
	if (key) {
		dsSystemGroup.set(&quot;parameter&quot;, {
			memeberId: &quot;${loginUsername}&quot;,
			groupName: key
		}).flushAsync();
	} else {
		dsSystemGroup.set(&quot;parameter&quot;, {
			memeberId: &quot;${loginUsername}&quot;,
			groupName: key
		}).flushAsync();
	}
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,ajaxActionExitGroup,dsGroup,dsWithoutSystemGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = arg.data.get(&quot;description&quot;) || &quot;&quot;;
var icon = arg.data.get(&quot;icon&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var remove = new dorado.widget.Control({
	exClassName: &quot;system-group-remove selection-remove fa fa-times-circle&quot;
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}

$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
remove.render(arg.dom);

$(arg.dom).find(&quot;.system-group-remove&quot;).on(&quot;click&quot;, function() {
	dorado.MessageBox.confirm(&quot;确定要退出“&quot; + arg.data.get(&quot;name&quot;) + &quot;”群组吗？&quot;, function() {
		ajaxActionExitGroup.set(&quot;parameter&quot;, {
			memberId: &quot;${loginUsername}&quot;,
			groupId: arg.data.get(&quot;id&quot;)
		}).execute(function() {
			dsGroup.done = true;
			dsWithoutSystemGroup.getData().insert(arg.data, &quot;begin&quot;);
		});
	});
});
</ClientEvent>
                                <Property name="dataSet">dsSystemGroup</Property>
                                <Property name="property">name</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:8" layoutConstraint="bottom">
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsSystemGroup</Property>
                                </DataPilot>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,dsGroup,dsActiveGroup,dialogSystemGroup">if (dsGroup.done) {
	dsGroup.flushAsync();
	dsActiveGroup.flushAsync();
}
delete dsGroup.done;
dialogSystemGroup.hide();

</ClientEvent>
                                  <Property name="caption">关闭</Property>
                                  <Property name="style">
                                    <Property name="width">60</Property>
                                    <Property name="margin-top">3px</Property>
                                  </Property>
                                </Button>
                              </Container>
                            </Container>
                          </MainControl>
                          <SideControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsWithoutSystemGroup">if (arg.keyCode === 13) {
	return;
}
if (self.groupQueryTask) {
	window.clearTimeout(self.groupQueryTask);
}
self.groupQueryTask = window.setTimeout(function(){
	var key = self.get(&quot;value&quot;);
	if (key) {
		dsWithoutSystemGroup.set(&quot;parameter&quot;, {
			memberId: &quot;${loginUsername}&quot;,
			groupName: key
		}).flushAsync();
	}
	else {
		dsWithoutSystemGroup.set(&quot;parameter&quot;, {
			memberId: &quot;${loginUsername}&quot;,
			groupName: &quot;&quot;
		}).flushAsync();
	}
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,dsSystemGroup,ajaxActionJoinGroup,dsGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = arg.data.get(&quot;description&quot;) || &quot;&quot;;
var icon = arg.data.get(&quot;icon&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name options&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description options&quot;,
	tip: d
});

var check = new dorado.widget.Control({
	exClassName: &quot;system-group-check selection-check fa fa-circle-o&quot;
});

if (icon) {
	icon = icon.replace(&quot;-text&quot;, &quot;-background&quot;);
	$(avatar.getDom()).addClass(icon);
} else {
	$(avatar.getDom()).text(n[0].toLocaleUpperCase());
}

$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
check.render(arg.dom);

$(arg.dom).find(&quot;.system-group-check&quot;).on(&quot;click&quot;, function() {
	if ($(this).hasClass(&quot;fa-circle-o&quot;)) {
		$(this).removeClass(&quot;fa-circle-o&quot;).addClass(&quot;fa-check-circle green-text&quot;);
		ajaxActionJoinGroup.set(&quot;parameter&quot;, {
			memberId: &quot;${loginUsername}&quot;,
			groupId: arg.data.get(&quot;id&quot;)
		}).execute(function() {
			dsSystemGroup.getData().insert(arg.data, &quot;begin&quot;);
		});
		dsGroup.done = true;
	}
});
</ClientEvent>
                                <Property name="dataSet">dsWithoutSystemGroup</Property>
                                <Property name="property">name</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:16" layoutConstraint="bottom">
                                <Property name="hideMode">display</Property>
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsWithoutSystemGroup</Property>
                                </DataPilot>
                              </Container>
                            </Container>
                          </SideControl>
                        </SplitPanel>
                      </Children>
                      <Tools/>
                    </Dialog>
                  </Container>
                </SideControl>
              </SplitPanel>
            </Container>
            <Container/>
          </CardBook>
          <Import src="org.malagu.panda.dorado.template.DialogIcon#dialogIcon"/>
        </Container>
      </Children>
      <Tools/>
    </Dialog>
  </View>
</ViewConfig>
