<?xml version="1.0" encoding="UTF-8"?>
<ViewConfig>
  <Arguments/>
  <Context/>
  <Model>
    <DataType name="Url">
      <Property name="creationType">org.malagu.panda.security.orm.Url</Property>
      <Property name="defaultDisplayProperty">name</Property>
      <PropertyDef name="id">
        <Property></Property>
      </PropertyDef>
      <PropertyDef name="name">
        <Property></Property>
        <Property name="label">名称</Property>
      </PropertyDef>
      <PropertyDef name="icon">
        <Property></Property>
        <Property name="label">图标</Property>
      </PropertyDef>
      <PropertyDef name="path">
        <Property></Property>
        <Property name="label">路径</Property>
      </PropertyDef>
      <PropertyDef name="navigable">
        <Property name="dataType">boolean</Property>
        <Property name="label">可导航</Property>
        <Property name="defaultValue">true</Property>
      </PropertyDef>
      <PropertyDef name="parentId">
        <Property></Property>
      </PropertyDef>
      <PropertyDef name="order">
        <Property name="dataType">Integer</Property>
        <Property name="label">排序号</Property>
      </PropertyDef>
      <PropertyDef name="description">
        <Property name="label">描述</Property>
      </PropertyDef>
      <PropertyDef name="children">
        <Property name="dataType">[SELF]</Property>
      </PropertyDef>
    </DataType>
    <DataType name="PasswordChange">
      <PropertyDef name="oldPassword">
        <Property name="required">true</Property>
        <Property name="label">原来密码</Property>
        <Validator name="validator1" type="ajax">
          <Property name="service">userController#validateOldPassword</Property>
        </Validator>
      </PropertyDef>
      <PropertyDef name="newPassword">
        <Property name="required">true</Property>
        <Property name="label">新设密码</Property>
        <Validator name="validator1" type="custom">
          <ClientEvent name="onValidate">if (arg.data != arg.entity.get(&quot;comfirmNewPassword&quot;)) {
	arg.result = &quot;两次密码输入不相同。&quot;
} else {
	arg.entity.setMessages(&quot;comfirmNewPassword&quot;, null);
}

</ClientEvent>
        </Validator>
      </PropertyDef>
      <PropertyDef name="confirmNewPassword">
        <Property name="required">true</Property>
        <Property name="label">再次确认</Property>
        <Validator name="validator1" type="custom">
          <ClientEvent name="onValidate">if (arg.data != arg.entity.get(&quot;newPassword&quot;)) {
	arg.result = &quot;两次密码输入不相同。&quot;
} else {
	arg.entity.setMessages(&quot;newPassword&quot;, null);
}
</ClientEvent>
        </Validator>
      </PropertyDef>
    </DataType>
  </Model>
  <View>
    <ClientEvent name="onReady" signature="self,arg,Chat,tabControl,cardBook,dsPart,dialogPart,historyContainer">$.cookie.json = true;
window.openTab = function (caption, icon, path) {
	var url;
	if (caption instanceof dorado.Entity) {
		url = caption;
		caption = url.get(&quot;name&quot;);
		icon = url.get(&quot;icon&quot;);
		path = url.get(&quot;path&quot;);
	}
	if (!path) {
		if (url) {
			dsPart.setData(url.get(&quot;children&quot;).toJSON());
			dialogPart.show();
		}
		return;
	} else {
		var tab = tabControl.getTab(path);
		if (!tab) {
			tab = {
				$type: &quot;IFrame&quot;,
				name: path,
				caption: caption,
				path: path,
				closeable: true
			}
			if (icon.indexOf(&quot;.png&quot;) == -1 &amp;&amp; icon.indexOf(&quot;.svg&quot;) == -1) {
				tab.iconClass = icon;
			}
			else {
				tab.icon = icon;
			}
			tab = tabControl.addTab(tab);
		}
		recordVisit(caption, icon, path);
		tabControl.set(&quot;currentTab&quot;, tab);
		cardBook.set(&quot;currentIndex&quot;, 1);
	}
};

window.refreshTab = function (caption, icon, path) {
	var url;
	if (caption instanceof dorado.Entity) {
		url = caption;
		caption = url.get(&quot;name&quot;);
		icon = url.get(&quot;icon&quot;);
		path = url.get(&quot;path&quot;);
	}
	var tab = tabControl.getTab(path);
	if (tab) {
		if (tab instanceof dorado.widget.tab.IFrameTab) {
			tab.get(&quot;control&quot;).reload();
		} else {
			tab.refresh();
		}
	}
}

var recordVisit = function(caption, icon, path) {
	var vh = $.cookie(&quot;visitHistory&quot;);
	if (!vh) {
		vh = [];
	} 
	vh.each(function(item) {
		if (item.path === path) {
			vh.remove(item);
			return false;
		}
	});
	vh.unshift({
		caption: caption,
		icon: icon,
		path: path
	});
	if (vh.length > 10) {
		vh.pop();
	}
	$.cookie('visitHistory', vh, { expires: 1000, path: window.location.pathname});
	refreshVisit();
};

var refreshVisit = function() {
	historyContainer.removeAllChildren();
	var vh = $.cookie(&quot;visitHistory&quot;);
	if (!vh || vh.length === 0) {
		historyContainer.set(&quot;height&quot;, 0);
		return;
	}
	historyContainer.set(&quot;height&quot;, 35);
	var children = [];
	children.push({
		$type: &quot;Label&quot;,
		exClassName: &quot;clear-placeholder fa fa-times-circle&quot;
	});
	vh.each(function(item) {
		children.push({
			$type: &quot;Label&quot;,
			exClassName: &quot;history&quot;,
			text: item.caption,
			onClick: function() {
				window.openTab(item.caption, item.icon, item.path);
			}
		});
	});
	children.push({
		$type: &quot;Label&quot;,
		exClassName: &quot;clear-history fa fa-times-circle&quot;,
		onClick: function() {
			$.removeCookie(&quot;visitHistory&quot;, {path: window.location.pathname});
			historyContainer.removeAllChildren();
		    historyContainer.set(&quot;height&quot;, 0);
		}
	});
	historyContainer.set(&quot;children&quot;, children);
};

refreshVisit();

Chat.addReceiveListener(function(c, arg) {
	if (self.refreshNoticeCountTask != null) {
		clearTimeout(self.refreshNotifyTotalTask);
	}
	self.refreshNoticeCountTask = setTimeout(function() {
		if (Chat.noticeCount) {
			$(&quot;.notify-total&quot;).css(&quot;display&quot;,  &quot;inline-block&quot;).text(Chat.noticeCount);
			if (Chat.noticeCount > 9) {
				$(&quot;.notify-total&quot;).css(&quot;padding&quot;,  &quot;2px 5px&quot;);
			} else {
				$(&quot;.notify-total&quot;).css(&quot;padding&quot;,  &quot;2px&quot;);
			}
		} else {
			$(&quot;.notify-total&quot;).css(&quot;display&quot;,  &quot;none&quot;).text(0);
		}
		self.refreshNoticeCountTask = null;
	}, 80);
});

Chat.addChatCloseListener(function() {
	Chat.hide();
});
</ClientEvent>
    <ClientEvent name="onClick" signature="self,arg,personalCenter">personalCenter.hide();
</ClientEvent>
    <Property name="packages">jquery-cookie,font-awesome-info,entypo-info,colors,chat</Property>
    <Property name="skin">${panda.framework.skin}</Property>
    <Property name="exClassName">main</Property>
    <Property name="cache">
      <Property name="mode">clientSide</Property>
      <Property name="maxAge">5000</Property>
    </Property>
    <DataSet id="dsPart">
      <Property name="dataType">[Url]</Property>
    </DataSet>
    <DataSet id="dsQuery">
      <Property name="dataType">[Url]</Property>
    </DataSet>
    <DataSet id="dsUrl">
      <ClientEvent name="onLoadData" signature="self,arg,dsQuery">self.listUrls = [];
var parseUrls = function(urls, result) {
	if (urls.entityCount &lt;= 0) {
		return;
	}
	urls.each(function(url) {
		result.push(url.toJSON());
		parseUrls(url.get(&quot;children&quot;), result);
	});
};

setTimeout(function() {
	parseUrls(self.getData(), self.listUrls);
	dsQuery.setData(self.listUrls);
}, 10);
</ClientEvent>
      <Property name="dataType">[Url]</Property>
      <Property name="dataProvider">frameworkController#loadUrlForLoginUser</Property>
      <Property name="cacheable">true</Property>
    </DataSet>
    <Container layoutConstraint="top">
      <Property name="height">64</Property>
      <Property name="exClassName">top</Property>
      <Container layout="native">
        <Property name="exClassName">banner</Property>
        <Property name="style">
          <Property name="background">${configure['panda.logo']}</Property>
        </Property>
        <Label>
          <Property name="text">${empty loginUser.organization.name ? configure['panda.appName'] : loginUser.organization.name}</Property>
          <Property name="exClassName">app-name</Property>
        </Label>
        <Control>
          <ClientEvent name="onClick" signature="self,arg,personalCenter">personalCenter.show({
	anchorTarget: self,
	vAlign: &quot;bottom&quot;,
	offsetLeft: -8
});
arg.returnValue = false;</ClientEvent>
          <Property name="exClassName">icon personal-center</Property>
        </Control>
        <Control>
          <ClientEvent name="onClick" signature="self,arg,Chat">Chat.set({
	width: &quot;700&quot;,
	height: &quot;560&quot;
});
Chat.show(function() {
	Chat.set({
		width: &quot;701&quot;,
		height: &quot;560&quot;
	});
});
arg.returnValue = false;
</ClientEvent>
          <ClientEvent name="onRefreshDom">$(arg.dom).html(&quot;&lt;div class='notify-total'>&lt;/div>&quot;)
</ClientEvent>
          <Property name="exClassName">icon remind</Property>
        </Control>
        <Control>
          <ClientEvent name="onClick" signature="self,arg,cardBook,portal">if (cardBook.get(&quot;currentIndex&quot;) === 1) {
	cardBook.set(&quot;currentIndex&quot;, 0);
} else {
	cardBook.set(&quot;currentIndex&quot;, 1);
}

</ClientEvent>
          <Property name="exClassName">icon search</Property>
        </Control>
        <FloatPanel id="personalCenter">
          <Property name="width">320</Property>
          <Property name="exClassName">personal-center</Property>
          <Property name="showAnimateType">slide</Property>
          <Property name="shadowMode">sides</Property>
          <Property name="closeable">true</Property>
          <Property name="showCaptionBar">true</Property>
          <Property name="height">230</Property>
          <Buttons/>
          <Children>
            <Container layout="hbox padding:15;regionPadding:20" layoutConstraint="center">
              <Control>
                <Property name="exClassName">avatar</Property>
                <Property name="width">100</Property>
                <Property name="height">100</Property>
              </Control>
              <Container layout="vbox pack:center">
                <Label>
                  <Property name="text">${loginUser.nickname}</Property>
                  <Property name="exClassName">nickname</Property>
                </Label>
                <Label>
                  <Property name="text">${loginUsername}</Property>
                  <Property name="exClassName">username</Property>
                </Label>
                <Button>
                  <ClientEvent name="onClick" signature="self,arg,personalCenter">window.openTab(&quot;个人中心&quot;, &quot;fa fa-tachometer red-text&quot;, &quot;${configure['panda.personCenter']}&quot;);
personalCenter.hide();
</ClientEvent>
                  <Property name="caption">个人中心</Property>
                  <Property name="ui">highlight</Property>
                </Button>
              </Container>
            </Container>
            <Container layout="padding:12" layoutConstraint="bottom">
              <Property name="height">50</Property>
              <Property name="exClassName">buttons</Property>
              <Button>
                <ClientEvent name="onClick" signature="self,arg,dialogPassword,personalCenter">personalCenter.hide();
dialogPassword.show();

</ClientEvent>
                <Property name="caption">修改密码</Property>
              </Button>
              <Button layoutConstraint="right">
                <ClientEvent name="onClick" signature="self,arg,Chat">window.location.href = &quot;${configure['panda.logoutPath']}&quot;;
</ClientEvent>
                <Property name="caption">退出</Property>
              </Button>
            </Container>
          </Children>
          <Tools/>
        </FloatPanel>
      </Container>
    </Container>
    <CardBook id="cardBook">
      <ClientEvent name="onCreate">var openUrlTree = $.cookie(&quot;openUrlTree&quot;);
var hasWelcomePage = !!&quot;${configure['panda.welcomePath']}&quot;;
if (openUrlTree != &quot;false&quot; || hasWelcomePage) {
	self.set(&quot;currentIndex&quot;, 1);
}

</ClientEvent>
      <Container id="portal" layout="padding:10">
        <Control id="colorLine" layoutConstraint="top">
          <Property name="width">0</Property>
          <Property name="visible">false</Property>
        </Control>
        <Container layout="hbox align:center;pack:center" layoutConstraint="top">
          <TextEditor>
            <Property name="width">300</Property>
            <Property name="style">
              <Property name="height">30px</Property>
              <Property name="line-height">30px</Property>
              <Property name="font-size">1.1em</Property>
              <Property name="-webkit-border-radius">30px</Property>
              <Property name="-moz-border-radius">30px</Property>
              <Property name="border-radius">30px</Property>
              <Property name="padding-left">12px</Property>
            </Property>
            <Property name="trigger">ddUrl</Property>
            <Property name="blankText">搜索</Property>
          </TextEditor>
        </Container>
        <Container id="historyContainer" layout="hbox pack:center;align:center;padding:0;stretch:false;regionPadding:10" layoutConstraint="top">
          <Property name="height">35</Property>
          <Property name="contentOverflow">hidden</Property>
          <Property name="exClassName">history-container</Property>
          <Property name="hideMode">visibility</Property>
        </Container>
        <DataBlockView>
          <ClientEvent name="onRenderBlock" signature="self,arg,colorLine">var icon = arg.data.get(&quot;icon&quot;) || &quot;&quot;;
arg.data._dom = arg.dom;
var blockBg = &quot;#000&quot;;
if (icon.indexOf(&quot;.png&quot;) != -1 || icon.indexOf(&quot;.svg&quot;) != -1) {
	icon = &quot;fa fa-file-text blue-text&quot;
}
var blockBg = $(colorLine.getDom()).addClass(icon).css(&quot;color&quot;);
blockBg = $(colorLine.getDom()).css(&quot;color&quot;);
$(arg.dom).empty().css({
	backgroundColor: blockBg,
	color: &quot;#fff&quot;,
	display: &quot;table&quot;,
	cursor: &quot;pointer&quot;
});
$(colorLine.getDom()).removeClass(icon);

$(arg.dom).xCreate({
	tagName: &quot;div&quot;,
	style: {
		display: &quot;table-cell&quot;,
		textAlign: &quot;center&quot;,
		verticalAlign: &quot;middle&quot;
	},
	content: [{
		tagName: &quot;div&quot;,
		className: icon + &quot; fa-3x&quot;,
		style:&quot;color:#fff !important;display: block;margin-bottom:3px;&quot;
	}, {
		tagName: &quot;span&quot;,
		content: arg.data.get(&quot;name&quot;)
	}]
});


</ClientEvent>
          <ClientEvent name="onBlockClick" signature="self,arg,dsPart,dialogPart">window.openTab(arg.data);
</ClientEvent>
          <Property name="dataSet">dsUrl</Property>
          <Property name="fillLine">true</Property>
          <Property name="blockLayout">vertical</Property>
          <Property name="lineSize">8</Property>
          <Property name="blockHeight">110</Property>
          <Property name="vertSpacing">12</Property>
          <Property name="horiSpacing">12</Property>
        </DataBlockView>
      </Container>
      <Container>
        <Control layoutConstraint="top">
          <Property name="height">10</Property>
          <Property name="exClassName">d-tabbar</Property>
        </Control>
        <SplitPanel>
          <ClientEvent name="onCollapsedChange">$.cookie(&quot;openUrlTree&quot;, !self.get(&quot;collapsed&quot;), { expires: 1000 });</ClientEvent>
          <ClientEvent name="onCreate">self.set(&quot;collapsed&quot;, $.cookie(&quot;openUrlTree&quot;) == &quot;false&quot;);
</ClientEvent>
          <Property name="position">200</Property>
          <Property name="exClassName">workarea</Property>
          <Property name="collapsed">false</Property>
          <MainControl>
            <Panel id="workspace">
              <Property name="border">none</Property>
              <Property name="maximizeable">true</Property>
              <Property name="exClassName">workspace</Property>
              <Buttons/>
              <Children>
                <TabControl id="tabControl">
                  <ClientEvent name="onTabContextMenu" signature="self,arg,menu">menu.show({
	event: arg.event
});
</ClientEvent>
                  <ClientEvent name="onCreateDom" signature="self,arg,workspace">$(arg.dom).delegate(&quot;.tab&quot;, &quot;dblclick&quot;, function() {
	if (workspace.get(&quot;maximized&quot;)) {
		workspace.maximizeRestore();
	} else {
		workspace.maximize();
	}
});
</ClientEvent>
                  <Property name="showMenuButton">true</Property>
                  <Property name="tabPlacement">top</Property>
                  <ControlTab>
                    <Property name="iconClass">${configure['panda.welcomeIcon']}</Property>
                    <Property name="caption">${configure['panda.welcomeTitle']}</Property>
                    <Property name="ignored">${empty configure['panda.welcomePath']}</Property>
                    <Property name="closeable">true</Property>
                    <SubViewHolder>
                      <Property name="subView">${configure['panda.welcomePath']}</Property>
                    </SubViewHolder>
                  </ControlTab>
                  <ControlTab>
                    <Property name="iconClass">${configure['panda.welcomeIcon1']}</Property>
                    <Property name="caption">${configure['panda.welcomeTitle1']}</Property>
                    <Property name="ignored">${empty configure['panda.welcomePath1']}</Property>
                    <Property name="closeable">true</Property>
                    <SubViewHolder>
                      <Property name="subView">${configure['panda.welcomePath1']}</Property>
                    </SubViewHolder>
                  </ControlTab>
                  <ControlTab>
                    <Property name="iconClass">${configure['panda.welcomeIcon2']}</Property>
                    <Property name="caption">${configure['panda.welcomeTitle2']}</Property>
                    <Property name="ignored">${empty configure['panda.welcomePath2']}</Property>
                    <Property name="closeable">true</Property>
                    <SubViewHolder>
                      <Property name="subView">${configure['panda.welcomePath2']}</Property>
                    </SubViewHolder>
                  </ControlTab>
                  <ControlTab>
                    <Property name="iconClass">${configure['panda.welcomeIcon3']}</Property>
                    <Property name="caption">${configure['panda.welcomeTitle3']}</Property>
                    <Property name="ignored">${empty configure['panda.welcomePath3']}</Property>
                    <Property name="closeable">true</Property>
                    <SubViewHolder>
                      <Property name="subView">${configure['panda.welcomePath3']}</Property>
                    </SubViewHolder>
                  </ControlTab>
                </TabControl>
              </Children>
              <Tools/>
            </Panel>
          </MainControl>
          <SideControl>
            <Container>
              <Panel layout="padding:5;regionPadding:10">
                <ClientEvent name="onCreateDom">$(arg.dom)
	.find(&quot;.d-caption-bar&quot;)
	.css(&quot;height&quot;, &quot;30px&quot;)
	.find(&quot;.caption&quot;)
	.css({
		&quot;height&quot;: &quot;30px&quot;,
		&quot;line-height&quot;: &quot;30px&quot;
	});
</ClientEvent>
                <Property name="height">100%</Property>
                <Buttons/>
                <Children>
                  <TextEditor layoutConstraint="top">
                    <ClientEvent name="onKeyDown" signature="self,arg,dsUrl,dsQuery,dtUrl">if (arg.keyCode === 13) {
	return;
}
window.clearTimeout(self.urlQueryTimeout);
self.urlQueryTimeout = window.setTimeout(function() {
	var key = self.get(&quot;value&quot;);
	var urls = dsUrl.getData();
	var result = [];
	var parseUrls = function(urls, result) {
		if (urls.entityCount &lt;= 0) {
			return;
		}
		urls.each(function(url) {
			var name = url.get(&quot;name&quot;) || &quot;&quot;;
			var description = url.get(&quot;description&quot;) || &quot;&quot;;
			if (name.indexOf(key) != -1 || description.indexOf(key) != -1) {
				result.push(url.toJSON());
			}
			parseUrls(url.get(&quot;children&quot;), result);
		});
	};
	if (!key) {
		dtUrl.set(&quot;dataSet&quot;, dsUrl);
		return;
	}
	parseUrls(urls, result);
	dsQuery.setData(result);
	dtUrl.set(&quot;dataSet&quot;, dsQuery);
}, 150);</ClientEvent>
                    <Property name="trigger">triggerQuery</Property>
                    <Property name="blankText">搜索</Property>
                    <Property name="style">
                      <Property name="padding-left">10px</Property>
                      <Property name="border-radius">24px</Property>
                      <Property name="height">24px</Property>
                      <Property name="-webkit-border-radius">24px</Property>
                      <Property name="-moz-border-radius">24px</Property>
                      <Property name="line-height">24px</Property>
                    </Property>
                    <Property name="exClassName">menu-search</Property>
                  </TextEditor>
                  <DataTree id="dtUrl">
                    <ClientEvent name="onRenderNode">var data = arg.node.get(&quot;data&quot;);
var icon = data.get(&quot;icon&quot;) || &quot;&quot;;
if (icon.indexOf(&quot;.png&quot;) == -1 &amp;&amp; icon.indexOf(&quot;.svg&quot;) == -1) {
	if (icon != arg.node.get(&quot;iconClass&quot;)) {
		arg.node.set(&quot;iconClass&quot;, icon);
	}
} else {
	if (icon != arg.node.get(&quot;icon&quot;)) {
		arg.node.set(&quot;icon&quot;, icon);
	}
}
$(arg.dom).text(data.get(&quot;name&quot;) || &quot;&quot;);
</ClientEvent>
                    <ClientEvent name="onDataNodeCreate">var data = arg.node.get(&quot;data&quot;);
var icon = data.get(&quot;icon&quot;) || &quot;&quot;;
if (icon.indexOf(&quot;.png&quot;) == -1 &amp;&amp; icon.indexOf(&quot;.svg&quot;) == -1) {
	if (icon != arg.node.get(&quot;iconClass&quot;)) {
		arg.node.set(&quot;iconClass&quot;, icon);
	}
} else {
	if (icon != arg.node.get(&quot;icon&quot;)) {
		arg.node.set(&quot;icon&quot;, icon);
	}
}
$(arg.dom).text(data.get(&quot;name&quot;) || &quot;&quot;);
</ClientEvent>
                    <ClientEvent name="onDataRowClick">var url = self.get(&quot;currentEntity&quot;);
window.openTab(url.get(&quot;name&quot;), url.get(&quot;icon&quot;), url.get(&quot;path&quot;));
var node = self.get(&quot;currentNode&quot;);
if (node.get(&quot;expanded&quot;)) {
	node.collapse();
} else {
	node.expandAsync();
}
</ClientEvent>
                    <ClientEvent name="onDataRowDoubleClick">var url = self.get(&quot;currentEntity&quot;);
window.refreshTab(url.get(&quot;name&quot;), url.get(&quot;icon&quot;), url.get(&quot;path&quot;));
</ClientEvent>
                    <Property name="dataSet">dsUrl</Property>
                    <Property name="currentNodeDataPath">currentNode</Property>
                    <Property name="draggable">false</Property>
                    <BindingConfigs>
                      <BindingConfig>
                        <Property name="childrenProperty">children</Property>
                        <Property name="labelProperty">name</Property>
                        <Property name="recursive">true</Property>
                        <Property name="tipProperty">description</Property>
                        <Property name="name">name</Property>
                      </BindingConfig>
                    </BindingConfigs>
                  </DataTree>
                </Children>
                <Tools/>
              </Panel>
            </Container>
          </SideControl>
        </SplitPanel>
        <Trigger id="triggerQuery">
          <ClientEvent name="onExecute">console.log(1)
</ClientEvent>
          <Property name="iconClass">d-trigger-icon-search</Property>
        </Trigger>
        <Menu id="menu">
          <Property name="iconPosition">left</Property>
          <MenuItem>
            <ClientEvent name="onClick" signature="self,arg,tabControl">tabControl.closeOtherTabs(tabControl.get(&quot;currentTab&quot;));
</ClientEvent>
            <Property name="caption">关闭其他标签页</Property>
            <Property name="iconClass">fa fa-times-circle red-text</Property>
          </MenuItem>
          <MenuItem>
            <ClientEvent name="onClick" signature="self,arg,tabControl">tabControl.closeAllTabs();
</ClientEvent>
            <Property name="caption">关闭所有标签页</Property>
            <Property name="iconClass">fa fa-times-circle red-text</Property>
          </MenuItem>
          <Separator/>
          <MenuItem>
            <Property name="caption">刷新（Ctrl + R）</Property>
            <Property name="iconClass">fa fa-refresh blue-text</Property>
            <Property name="action">actionRefreshTab</Property>
          </MenuItem>
          <MenuItem>
            <Property name="caption">最大最小化（Ctrl + X）</Property>
            <Property name="iconClass">fa fa-arrows-alt blue-text</Property>
            <Property name="action">actionMax</Property>
          </MenuItem>
        </Menu>
      </Container>
    </CardBook>
    <Action id="actionRefreshTab">
      <ClientEvent name="onSuccess" signature="self,arg,tabControl">var tab = tabControl.get(&quot;currentTab&quot;);
if (tab) {
	if (tab instanceof dorado.widget.tab.IFrameTab) {
		tab.get(&quot;control&quot;).reload();
	} else {
		tab.refresh();
	}
}

</ClientEvent>
      <Property name="hotkey">ctrl+r</Property>
    </Action>
    <Action id="actionMax">
      <ClientEvent name="onSuccess" signature="self,arg,workspace">if (workspace.get(&quot;maximized&quot;)) {
		workspace.maximizeRestore();
	} else {
		workspace.maximize();
	}
</ClientEvent>
      <Property name="hotkey">ctrl+x</Property>
    </Action>
    <Action id="actionUrlSearch">
      <ClientEvent name="onSuccess" signature="self,arg,urlSearch">urlSearch.show();
</ClientEvent>
      <ClientEvent name="beforeExecute" signature="self,arg,urlSearch">if (urlSearch.get(&quot;visible&quot;)) {
	arg.processDefault = false;
} else if (!self.count) {
	self.count = 1;
	setTimeout(function() {
		self.count = 0;
	}, 200);
	arg.processDefault = false;
}</ClientEvent>
      <Property name="hotkey">space</Property>
    </Action>
    <FloatPanel id="dialogPassword" layout="padding:20">
      <Property name="caption">密码修改</Property>
      <Property name="center">true</Property>
      <Property name="shadowMode">frame</Property>
      <Property name="closeable">true</Property>
      <Property name="containerUi">default</Property>
      <Property name="width">400</Property>
      <Property name="height">250</Property>
      <Buttons/>
      <Children>
        <AutoForm id="autoFormPassword">
          <Property name="dataType">PasswordChange</Property>
          <Property name="cols">*</Property>
          <Property name="labelAlign">right</Property>
          <Property name="createPrivateDataSet">true</Property>
          <Property name="rowPadding">12</Property>
          <AutoFormElement>
            <Property name="name">oldPassword</Property>
            <Property name="property">oldPassword</Property>
            <Property name="editorType">PasswordEditor</Property>
            <Editor/>
          </AutoFormElement>
          <AutoFormElement>
            <Property name="name">newPassword</Property>
            <Property name="property">newPassword</Property>
            <Property name="editorType">PasswordEditor</Property>
            <Editor/>
          </AutoFormElement>
          <AutoFormElement>
            <Property name="name">confirmNewPassword</Property>
            <Property name="property">confirmNewPassword</Property>
            <Property name="editorType">PasswordEditor</Property>
            <Editor/>
          </AutoFormElement>
        </AutoForm>
        <AjaxAction id="ajaxActionChangePassword">
          <Property name="service">userController#changePassword</Property>
          <Property name="executingMessage">正在执行……</Property>
          <Property name="successMessage">密码修改成功。</Property>
        </AjaxAction>
        <Container layout="hbox pack:center;regionPadding:15" layoutConstraint="bottom">
          <Button>
            <ClientEvent name="onClick">self.get(&quot;parent.parent&quot;).hide();
</ClientEvent>
            <Property name="caption">取消</Property>
            <Property name="width">60</Property>
          </Button>
          <Button>
            <ClientEvent name="onClick" signature="self,arg,ajaxActionChangePassword,autoFormPassword">var newPassword = autoFormPassword.get(&quot;entity&quot;).get(&quot;newPassword&quot;);
var entity = autoFormPassword.get(&quot;entity&quot;);

entity.set(&quot;confirmNewPassword&quot;, entity.get(&quot;confirmNewPassword&quot;));
entity.set(&quot;newPassword&quot;, entity.get(&quot;newPassword&quot;));
entity.set(&quot;oldPassword&quot;, entity.get(&quot;oldPassword&quot;));


if (entity.get(&quot;oldPassword&quot;) &amp;&amp; entity.get(&quot;newPassword&quot;) &amp;&amp; entity.get(&quot;confirmNewPassword&quot;) &amp;&amp; autoFormPassword.validate(true) === true) {
	ajaxActionChangePassword.set(&quot;parameter&quot;, {
		username: &quot;${loginUsername}&quot;,
		newPassword: newPassword
	}).execute(function() {
		self.get(&quot;parent.parent&quot;).hide();
		autoFormPassword.get(&quot;entity&quot;).reset();
	});
} else {
	dorado.MessageBox.alert(&quot;验证不通过，请检查。&quot;);
}
</ClientEvent>
            <Property name="caption">确认</Property>
            <Property name="width">60</Property>
            <Property name="ui">highlight</Property>
          </Button>
        </Container>
      </Children>
      <Tools/>
    </FloatPanel>
    <DataSetDropDown id="ddUrl">
      <ClientEvent name="onValueSelect">window.openTab(arg.selectedValue);
</ClientEvent>
      <ClientEvent name="onFilterItems">arg.filterOperator = &quot;like&quot;;
self.done = false;
</ClientEvent>
      <ClientEvent name="onFilterItem">if (!self.done &amp;&amp; arg.value.get(&quot;name&quot;).indexOf(arg.filterValue) != -1) {
	arg.value.setCurrent();
	self.done = true;
}
</ClientEvent>
      <Property name="dataSet">dsQuery</Property>
      <Property name="filterOnTyping">true</Property>
      <Property name="filterOnOpen">false</Property>
      <Property name="filterMode">clientSide</Property>
      <Property name="dynaFilter">true</Property>
      <Property name="autoOpen">true</Property>
      <Property name="buttonVisible">false</Property>
      <Property name="useDataBinding">true</Property>
    </DataSetDropDown>
    <FloatPanel id="dialogPart" layout="padding:10">
      <Property name="center">true</Property>
      <Property name="shadowMode">frame</Property>
      <Property name="closeable">true</Property>
      <Property name="containerUi">default</Property>
      <Property name="showCaptionBar">true</Property>
      <Property name="closeAction">hide</Property>
      <Property name="height">420</Property>
      <Property name="width">350</Property>
      <Property name="caption">菜单</Property>
      <Property name="maximizeable">true</Property>
      <Buttons/>
      <Children>
        <Container/>
        <DataTree>
          <ClientEvent name="onRenderNode">var data = arg.node.get(&quot;data&quot;);
var icon = data.get(&quot;icon&quot;) || &quot;&quot;;
if (icon.indexOf(&quot;.png&quot;) == -1 &amp;&amp; icon.indexOf(&quot;.svg&quot;) == -1) {
	if (icon != arg.node.get(&quot;iconClass&quot;)) {
		arg.node.set(&quot;iconClass&quot;, icon);
	}
} else {
	if (icon != arg.node.get(&quot;icon&quot;)) {
		arg.node.set(&quot;icon&quot;, icon);
	}
}
$(arg.dom).text(data.get(&quot;name&quot;) || &quot;&quot;);
</ClientEvent>
          <ClientEvent name="onDataNodeCreate">var data = arg.node.get(&quot;data&quot;);
var icon = data.get(&quot;icon&quot;) || &quot;&quot;;
if (icon.indexOf(&quot;.png&quot;) == -1 &amp;&amp; icon.indexOf(&quot;.svg&quot;) == -1) {
	if (icon != arg.node.get(&quot;iconClass&quot;)) {
		arg.node.set(&quot;iconClass&quot;, icon);
	}
} else {
	if (icon != arg.node.get(&quot;icon&quot;)) {
		arg.node.set(&quot;icon&quot;, icon);
	}
}
$(arg.dom).text(data.get(&quot;name&quot;) || &quot;&quot;);
</ClientEvent>
          <ClientEvent name="onDataRowClick">var url = self.get(&quot;currentEntity&quot;);
if (url.get(&quot;path&quot;)) {
	window.openTab(url.get(&quot;name&quot;), url.get(&quot;icon&quot;), url.get(&quot;path&quot;));
}
</ClientEvent>
          <ClientEvent name="onDataRowDoubleClick">var url = self.get(&quot;currentEntity&quot;);
if (url.get(&quot;path&quot;)) {
	window.refreshTab(url.get(&quot;name&quot;), url.get(&quot;icon&quot;), url.get(&quot;path&quot;));
}</ClientEvent>
          <Property name="dataSet">dsPart</Property>
          <Property name="currentNodeDataPath">currentNode</Property>
          <Property name="draggable">false</Property>
          <Property name="showLines">true</Property>
          <BindingConfigs>
            <BindingConfig>
              <Property name="childrenProperty">children</Property>
              <Property name="labelProperty">name</Property>
              <Property name="recursive">true</Property>
              <Property name="tipProperty">description</Property>
              <Property name="name">name</Property>
              <Property name="expandLevel">5</Property>
              <Property name="hasChildProperty">hasChild</Property>
            </BindingConfig>
          </BindingConfigs>
        </DataTree>
      </Children>
      <Tools/>
    </FloatPanel>
    <Import src="org.malagu.panda.notice.ui.view.Chat#Chat"/>
  </View>
</ViewConfig>
